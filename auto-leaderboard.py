#!/usr/bin/env python3
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤ ANON Farm
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

import requests
import time
import json
from collections import defaultdict
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç)
BOT_TOKEN = '8459622700:AAFHx3Lv3eghzrlkyH-VLk5GwTZpx2AbEBM'
CHAT_ID = '-1002719894591'
last_update_id = 0

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
players_stats = {}

def send_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    data = {
        'chat_id': CHAT_ID,
        'text': text,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
    if num >= 1000000000:
        return f"{num/1000000000:.1f}B"
    elif num >= 1000000:
        return f"{num/1000000:.1f}M"
    elif num >= 1000:
        return f"{num/1000:.1f}K"
    else:
        return str(int(num))

def parse_player_stats(message_text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message_text.startswith('üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:'):
        return None
    
    try:
        lines = message_text.split('\n')
        
        # –ü–∞—Ä—Å–∏–º –∏–º—è –∏ username
        name_line = lines[1]  # üë§ Razum (@razum200)
        name_match = re.search(r'üë§ (.+?) \(@(.+?)\)', name_line)
        if not name_match:
            return None
        
        player_name = name_match.group(1)
        username = name_match.group(2)
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω—ã
        tokens_line = lines[2]  # üí∞ –¢–æ–∫–µ–Ω—ã: 15.2K
        tokens_match = re.search(r'üí∞ –¢–æ–∫–µ–Ω—ã: (.+)', tokens_line)
        if not tokens_match:
            return None
        
        tokens_str = tokens_match.group(1)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —á–∏—Å–ª–æ
        if 'K' in tokens_str:
            tokens = float(tokens_str.replace('K', '')) * 1000
        elif 'M' in tokens_str:
            tokens = float(tokens_str.replace('M', '')) * 1000000
        elif 'B' in tokens_str:
            tokens = float(tokens_str.replace('B', '')) * 1000000000
        else:
            tokens = float(tokens_str)
        
        # –ü–∞—Ä—Å–∏–º —É—Ä–æ–≤–µ–Ω—å
        level_line = lines[3]  # üèÜ –£—Ä–æ–≤–µ–Ω—å: 7
        level_match = re.search(r'üèÜ –£—Ä–æ–≤–µ–Ω—å: (\d+)', level_line)
        level = int(level_match.group(1)) if level_match else 1
        
        return {
            'name': player_name,
            'username': username,
            'tokens': tokens,
            'level': level,
            'last_update': datetime.now()
        }
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None

def generate_leaderboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    if not players_stats:
        return ("üèÜ ANON Farm - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
                "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö\n"
                "üéÆ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!\n\n"
                "üî• Stay $ANON!")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    sorted_players = sorted(players_stats.values(), key=lambda x: x['tokens'], reverse=True)[:10]
    
    message = "üèÜ ANON Farm - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
    
    for i, player in enumerate(sorted_players):
        if i == 0:
            medal = "ü•á"
        elif i == 1:
            medal = "ü•à"
        elif i == 2:
            medal = "ü•â"
        else:
            medal = f"{i+1}."
        
        message += f"{medal} <b>{player['name']}</b>\n"
        message += f"üí∞ {format_number(player['tokens'])} $ANON —Ç–æ–∫–µ–Ω–æ–≤\n"
        message += f"üèÜ –£—Ä–æ–≤–µ–Ω—å {player['level']}\n\n"
    
    message += f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players_stats)}\n"
    message += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y, %H:%M')}\n\n"
    message += "üî• Stay $ANON!"
    
    return message

def get_updates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    global last_update_id
    
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/getUpdates'
    params = {
        'offset': last_update_id + 1,
        'timeout': 30
    }
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            data = response.json()
            if data['ok'] and data['result']:
                for update in data['result']:
                    process_update(update)
                    last_update_id = update['update_id']
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    return False

def process_update(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if 'message' not in update:
        return
    
    message = update['message']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
    if str(message['chat']['id']) != CHAT_ID:
        return
    
    text = message.get('text', '')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
    if text.startswith('üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:'):
        player_data = parse_player_stats(text)
        if player_data:
            player_id = player_data['username']
            players_stats[player_id] = player_data
            print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {player_data['name']} - {format_number(player_data['tokens'])} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ø–∞
    elif 'üèÜ –ó–ê–ü–†–û–° –¢–û–ü–ê –ò–ì–†–û–ö–û–í' in text:
        print("üèÜ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        time.sleep(2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø
        leaderboard = generate_leaderboard()
        send_message(leaderboard)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ ANON Farm Auto Leaderboard –∑–∞–ø—É—â–µ–Ω!")
    print("üìä –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    print(f"üí¨ –ß–∞—Ç: {CHAT_ID}")
    print("=" * 50)
    
    while True:
        try:
            get_updates()
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except KeyboardInterrupt:
            print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()