from http.server import BaseHTTPRequestHandler
import json
import os
import urllib.request
import urllib.parse
from urllib.parse import urlparse
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Gist (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python)
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
GIST_ID = '0bbf93ba7dc734609f50be0e06c6ce94'
GIST_FILENAME = 'anon-farm-leaderboard.json'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤ (–ø–∞–º—è—Ç—å + GitHub)
players_stats = {}

def load_stats_from_gist():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ GitHub Gist (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)"""
    global players_stats
    try:
        if not GITHUB_TOKEN:
            print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å")
            return
            
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ GitHub Gist (urllib)...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        url = f'https://api.github.com/gists/{GIST_ID}'
        req = urllib.request.Request(url)
        req.add_header('Authorization', f'token {GITHUB_TOKEN}')
        req.add_header('Accept', 'application/vnd.github.v3+json')
        req.add_header('User-Agent', 'ANON-Farm-API/1.0')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            if response.status == 200:
                data = json.loads(response.read().decode('utf-8'))
                
                if GIST_FILENAME in data['files']:
                    content = data['files'][GIST_FILENAME]['content']
                    
                    if content.strip() and content.strip() != '{}':
                        players_stats = json.loads(content)
                        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Gist")
                    else:
                        players_stats = {}
                        print("üìä Gist –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å")
                else:
                    print("üìä –§–∞–π–ª –≤ Gist –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå HTTP {response.status}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Gist: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç–æ–π –ø–∞–º—è—Ç—å—é

def save_stats_to_gist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ GitHub Gist (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)"""
    try:
        if not GITHUB_TOKEN or not players_stats:
            return
            
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –≤ Gist...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        gist_data = {
            'files': {
                GIST_FILENAME: {
                    'content': json.dumps(players_stats, ensure_ascii=False, indent=2)
                }
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º PATCH –∑–∞–ø—Ä–æ—Å
        url = f'https://api.github.com/gists/{GIST_ID}'
        data = json.dumps(gist_data).encode('utf-8')
        
        req = urllib.request.Request(url, data=data, method='PATCH')
        req.add_header('Authorization', f'token {GITHUB_TOKEN}')
        req.add_header('Accept', 'application/vnd.github.v3+json')
        req.add_header('Content-Type', 'application/json')
        req.add_header('User-Agent', 'ANON-Farm-API/1.0')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            if response.status == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Gist")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist: {e}")

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
    try:
        num = float(num)
        if num >= 1000000000:
            return f"{num/1000000000:.1f}B"
        elif num >= 1000000:
            return f"{num/1000000:.1f}M"
        elif num >= 1000:
            return f"{num/1000:.1f}K"
        else:
            return str(int(num))
    except:
        return "0"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
try:
    load_stats_from_gist()
    print("üöÄ API –∑–∞–ø—É—â–µ–Ω —Å GitHub Gist (urllib)")
except Exception as e:
    print(f"‚ö†Ô∏è API –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏: {e}")

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if path == '/' or path == '/api':
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Gist
                load_stats_from_gist()
                
                github_status = "‚úÖ GitHub Gist" if GITHUB_TOKEN else "‚ö†Ô∏è Memory only"
                
                data = {
                    'message': 'ANON Farm API',
                    'version': '7.2-github-gist-urllib', 
                    'status': f'working {github_status}',
                    'total_players': len(players_stats),
                    'gist_url': f'https://gist.github.com/Razum200/{GIST_ID}',
                    'endpoints': {
                        'leaderboard': '/api/leaderboard',
                        'submit': '/api/submit_stats'
                    },
                    'timestamp': datetime.now().isoformat()
                }
                
            # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            elif path == '/api/leaderboard':
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Gist
                load_stats_from_gist()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
                sorted_players = sorted(
                    players_stats.values(),
                    key=lambda x: float(x.get('tokens', 0)),
                    reverse=True
                )[:10]
                
                leaderboard = []
                for i, player in enumerate(sorted_players):
                    leaderboard.append({
                        'rank': i + 1,
                        'name': player.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫'),
                        'tokens': float(player.get('tokens', 0)),
                        'tokens_formatted': format_number(player.get('tokens', 0)),
                        'level': int(player.get('level', 1))
                    })
                
                print(f"üìä –û—Ç–¥–∞–µ–º —Ç–æ–ø: {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤")
                
                data = {
                    'success': True,
                    'leaderboard': leaderboard,
                    'total_players': len(players_stats),
                    'storage': 'GitHub Gist' if GITHUB_TOKEN else 'Memory',
                    'updated_at': datetime.now().isoformat()
                }
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            else:
                self.send_response(404)
                data = {
                    'error': 'Not Found',
                    'message': f'Endpoint {path} not found'
                }
                
            self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {'error': 'Internal Server Error', 'message': str(e)}
            self.wfile.write(json.dumps(data).encode())
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            if path == '/api/submit_stats':
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                player_data = json.loads(post_data.decode('utf-8'))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                player_id = player_data.get('user_id', 'unknown')
                players_stats[player_id] = player_data
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub Gist (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                save_stats_to_gist()
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                storage_info = "GitHub Gist" if GITHUB_TOKEN else "Memory only"
                
                data = {
                    'success': True,
                    'message': f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {storage_info}',
                    'total_players': len(players_stats),
                    'storage': storage_info
                }
                
                print(f"üíæ –ò–≥—Ä–æ–∫ {player_data.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π')} —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({storage_info})")
                
                self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
            else:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {'error': 'Not Found'}
                self.wfile.write(json.dumps(data).encode())
                
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {'error': 'POST Error', 'message': str(e)}
            self.wfile.write(json.dumps(data).encode())
        
    def do_OPTIONS(self):
        """CORS –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()