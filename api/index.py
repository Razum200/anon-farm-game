from http.server import BaseHTTPRequestHandler
import json
import os
# import requests  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞
from datetime import datetime
from urllib.parse import urlparse, parse_qs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Gist (—Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
GIST_ID = '0bbf93ba7dc734609f50be0e06c6ce94'
GIST_FILENAME = 'anon-farm-leaderboard.json'

# –§–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–µ–∑–µ—Ä–≤)
STATS_FILE = '/tmp/anon_farm_stats.json'

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤
players_stats = {}

def load_stats_from_gist():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ GitHub Gist"""
    global players_stats
    try:
        if not GITHUB_TOKEN:
            print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å")
            players_stats = {}
            return
            
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub Gist...")
        
        headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        response = requests.get(f'https://api.github.com/gists/{GIST_ID}', headers=headers, timeout=10)
        
        if response.status_code == 200:
            gist_data = response.json()
            
            if GIST_FILENAME in gist_data['files']:
                content = gist_data['files'][GIST_FILENAME]['content']
                
                if content.strip():
                    players_stats = json.loads(content)
                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Gist")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if players_stats:
                        top_players = list(players_stats.keys())[:3]
                        print(f"üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–∏ –≤ Gist: {top_players}")
                else:
                    players_stats = {}
                    print("üìä Gist –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å")
            else:
                players_stats = {}
                print("üìä –§–∞–π–ª –≤ Gist –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Gist: HTTP {response.status_code}")
            players_stats = {}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Gist: {e}")
        players_stats = {}

def save_stats_to_gist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ GitHub Gist"""
    try:
        if not GITHUB_TOKEN:
            print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Gist –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return
            
        print(f"üåê –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –≤ GitHub Gist...")
        
        headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }
        
        data = {
            'files': {
                GIST_FILENAME: {
                    'content': json.dumps(players_stats, ensure_ascii=False, indent=2)
                }
            }
        }
        
        response = requests.patch(f'https://api.github.com/gists/{GIST_ID}', 
                                headers=headers, 
                                json=data, 
                                timeout=10)
        
        if response.status_code == 200:
            print(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –≤ Gist")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist: HTTP {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º GitHub)
# load_stats_from_gist()
print("üöÄ API –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
    try:
        num = float(num)
        if num >= 1000000000:
            return f"{num/1000000000:.1f}B"
        elif num >= 1000000:
            return f"{num/1000000:.1f}M"
        elif num >= 1000:
            return f"{num/1000:.1f}K"
        else:
            return str(int(num))
    except:
        return "0"

class handler(BaseHTTPRequestHandler):
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            self.end_headers()
            
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if path == '/' or path == '/api':
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±–µ–∑ GitHub
                # load_stats_from_gist()
                
                print(f"üèì API –ø–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω - {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (—Ç–µ—Å—Ç)")
                
                data = {
                    'message': 'ANON Farm Leaderboard API',
                    'version': '6.1-test-mode-without-github',
                    'status': 'running on Vercel ‚úÖ',
                    'game_url': 'https://razum200.github.io/anon-farm-game/',
                    'endpoints': {
                        'leaderboard': '/api/leaderboard',
                        'stats': '/api/stats',
                        'submit': '/api/submit_stats'
                    },
                    'total_players': len(players_stats),
                    'timestamp': datetime.now().isoformat()
                }
                
                self.wfile.write(json.dumps(data).encode())
                return
            
            # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            elif path == '/api/leaderboard':
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±–µ–∑ GitHub
                # load_stats_from_gist()
                
                print(f"üìä –û—Ç–¥–∞–µ–º —Ç–æ–ø: {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏ (—Ç–µ—Å—Ç)")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
                sorted_players = sorted(
                    players_stats.values(),
                    key=lambda x: float(x.get('tokens', 0)),
                    reverse=True
                )[:10]
                
                leaderboard = []
                for i, player in enumerate(sorted_players):
                    leaderboard.append({
                        'rank': i + 1,
                        'name': player.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫'),
                        'tokens': float(player.get('tokens', 0)),
                        'tokens_formatted': format_number(player.get('tokens', 0)),
                        'level': int(player.get('level', 1))
                    })
                
                data = {
                    'success': True,
                    'leaderboard': leaderboard,
                    'total_players': len(players_stats),
                    'updated_at': datetime.now().isoformat()
                }
                
                self.wfile.write(json.dumps(data).encode())
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            elif path == '/api/stats':
                total_tokens = sum(float(p.get('tokens', 0)) for p in players_stats.values())
                avg_level = sum(int(p.get('level', 1)) for p in players_stats.values()) / len(players_stats) if players_stats else 0
                
                data = {
                    'success': True,
                    'total_players': len(players_stats),
                    'total_tokens': total_tokens,
                    'total_tokens_formatted': format_number(total_tokens),
                    'average_level': round(avg_level, 1),
                    'updated_at': datetime.now().isoformat()
                }
                
                self.wfile.write(json.dumps(data).encode())
                return
            
            # 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            else:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {
                    'error': 'Not Found',
                    'message': f'Endpoint {path} not found',
                    'available': ['/', '/api/leaderboard', '/api/stats', '/api/submit_stats']
                }
                
                self.wfile.write(json.dumps(data).encode())
                return
                
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {
                'error': 'Internal Server Error',
                'message': str(e)
            }
            
            self.wfile.write(json.dumps(data).encode())
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            if path == '/api/submit_stats':
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                player_id = str(data.get('player_id', f"player_{int(datetime.now().timestamp())}"))
                name = str(data.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫'))
                tokens = float(data.get('tokens', 0))
                level = int(data.get('level', 1))
                
                players_stats[player_id] = {
                    'name': name,
                    'username': player_id,
                    'tokens': tokens,
                    'level': level,
                    'last_update': datetime.now().isoformat()
                }
                
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                # save_stats_to_gist()
                print(f"üíæ –ò–≥—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (—Ç–µ—Å—Ç): {name} - {tokens} —Ç–æ–∫–µ–Ω–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response_data = {
                    'success': True,
                    'message': 'Stats saved successfully',
                    'player_id': player_id,
                    'tokens': tokens,
                    'level': level
                }
                
                self.wfile.write(json.dumps(response_data).encode())
                return
            
            else:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {
                    'error': 'Not Found',
                    'message': f'POST endpoint {path} not found'
                }
                
                self.wfile.write(json.dumps(data).encode())
                
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {
                'error': 'Internal Server Error',
                'message': str(e)
            }
            
            self.wfile.write(json.dumps(data).encode())