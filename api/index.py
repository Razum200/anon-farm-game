from http.server import BaseHTTPRequestHandler
import json
import os
import urllib.request
import urllib.parse
from urllib.parse import urlparse
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Gist (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python)
GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN', '')
GIST_ID = '0bbf93ba7dc734609f50be0e06c6ce94'
GIST_FILENAME = 'anon-farm-leaderboard.json'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤ (–ø–∞–º—è—Ç—å + GitHub)
players_stats = {}

# PvP –∏–≥—Ä—ã 21
pvp_games = {}
active_players = {}  # –ò–≥—Ä–æ–∫–∏ –≤ –ø–æ–∏—Å–∫–µ

def load_stats_from_gist():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ GitHub Gist (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)"""
    global players_stats
    try:
        print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò:")
        print(f"   - GITHUB_TOKEN –µ—Å—Ç—å: {bool(GITHUB_TOKEN)}")
        
        if not GITHUB_TOKEN:
            print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å")
            return
            
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ GitHub Gist (urllib)...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        url = f'https://api.github.com/gists/{GIST_ID}'
        req = urllib.request.Request(url)
        req.add_header('Authorization', f'Bearer {GITHUB_TOKEN}')
        req.add_header('Accept', 'application/vnd.github.v3+json')
        req.add_header('User-Agent', 'ANON-Farm-API/1.0')
        
        print(f"üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: {url}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            print(f"üì° –û—Ç–≤–µ—Ç GitHub: HTTP {response.status}")
            
            if response.status == 200:
                data = json.loads(response.read().decode('utf-8'))
                print(f"üìÑ –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ Gist, —Ñ–∞–π–ª–æ–≤: {len(data.get('files', {}))}")
                
                if GIST_FILENAME in data['files']:
                    content = data['files'][GIST_FILENAME]['content']
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤): {content[:100]}...")
                    
                    if content.strip() and content.strip() != '{}':
                        players_stats = json.loads(content)
                        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Gist")
                        print(f"üìä –ò–≥—Ä–æ–∫–∏: {list(players_stats.keys())}")
                    else:
                        players_stats = {}
                        print("üìä Gist –ø—É—Å—Ç–æ–π ({}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å")
                else:
                    print(f"üìä –§–∞–π–ª {GIST_FILENAME} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Gist")
                    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {list(data.get('files', {}).keys())}")
            else:
                print(f"‚ùå HTTP {response.status}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Gist: {e}")
        print(f"‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç–æ–π –ø–∞–º—è—Ç—å—é

def save_stats_to_gist():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ GitHub Gist (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)"""
    print(f"üîß –í–•–û–î –í save_stats_to_gist() - –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò")
    try:
        print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø:")
        print(f"   - GITHUB_TOKEN –µ—Å—Ç—å: {bool(GITHUB_TOKEN)}")
        print(f"   - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(GITHUB_TOKEN) if GITHUB_TOKEN else 0}")
        print(f"   - –ò–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(players_stats)}")
        print(f"   - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤: {list(players_stats.keys()) if players_stats else '–ü—É—Å—Ç–æ'}")
        print(f"   - GIST_ID: {GIST_ID}")
        print(f"   - GIST_FILENAME: {GIST_FILENAME}")
        
        if not GITHUB_TOKEN:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: GitHub —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            print("‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GITHUB_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel")
            return
            
        if not players_stats:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç—ã, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å")
            return
            
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤ –≤ Gist...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        gist_data = {
            'files': {
                GIST_FILENAME: {
                    'content': json.dumps(players_stats, ensure_ascii=False, indent=2)
                }
            }
        }
        
        print(f"üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ JSON ({len(json.dumps(gist_data))} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –°–æ–∑–¥–∞–µ–º PATCH –∑–∞–ø—Ä–æ—Å
        url = f'https://api.github.com/gists/{GIST_ID}'
        data = json.dumps(gist_data).encode('utf-8')
        
        req = urllib.request.Request(url, data=data, method='PATCH')
        req.add_header('Authorization', f'Bearer {GITHUB_TOKEN}')
        req.add_header('Accept', 'application/vnd.github.v3+json')
        req.add_header('Content-Type', 'application/json')
        req.add_header('User-Agent', 'ANON-Farm-API/1.0')
        
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: Bearer {GITHUB_TOKEN[:8]}...{GITHUB_TOKEN[-4:]}")
        
        print(f"üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –≤ GitHub...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=15) as response:
            if response.status == 200:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Gist! –°—Ç–∞—Ç—É—Å: {response.status}")
                response_data = response.read().decode('utf-8')
                print(f"üìù –û—Ç–≤–µ—Ç GitHub: {response_data[:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: HTTP {response.status}")
                error_data = response.read().decode('utf-8')
                print(f"üìù –û—à–∏–±–∫–∞ GitHub: {error_data}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist: {e}")
        print(f"‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        print(f"‚ö†Ô∏è –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
    try:
        num = float(num)
        if num >= 1000000000:
            return f"{num/1000000000:.1f}B"
        elif num >= 1000000:
            return f"{num/1000000:.1f}M"
        elif num >= 1000:
            return f"{num/1000:.1f}K"
        else:
            return str(int(num))
    except:
        return "0"

def remove_player_from_leaderboard(player_id):
    """–£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    global players_stats
    
    if player_id in players_stats:
        removed_player = players_stats.pop(player_id)
        print(f"üóëÔ∏è –ò–≥—Ä–æ–∫ {player_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            save_stats_to_gist()
            print(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Gist")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Gist: {e}")
        
        return {
            'success': True,
            'message': f'–ò–≥—Ä–æ–∫ {removed_player.get("name", "–ê–Ω–æ–Ω–∏–º–Ω—ã–π")} —É–¥–∞–ª–µ–Ω',
            'removed_player': removed_player
        }
    else:
        return {
            'success': False,
            'error': '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }

# PvP —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã 21
def create_pvp_game(player1_id, player1_name, bet_amount):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é PvP –∏–≥—Ä—É"""
    global players_stats
    global pvp_games, active_players
    game_id = f"game_{len(pvp_games)}_{int(datetime.now().timestamp())}"
    
    game = {
        'id': game_id,
        'player1': {
            'id': player1_id,
            'name': player1_name,
            'hand': [],
            'bet': bet_amount,
            'ready': False
        },
        'player2': None,
        'deck': create_deck(),
        'state': 'waiting',  # waiting, playing, finished
        'current_turn': None,
        'created_at': datetime.now().isoformat(),
        'player1_stood': False,
        'player2_stood': False
    }
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: player1_id = {player1_id}")
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞: players_stats keys = {list(players_stats.keys())}")
    if player1_id in players_stats:
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –°–Ω–∏–º–∞–µ–º {bet_amount} —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞ {player1_id}")
        players_stats[player1_id]['tokens'] -= bet_amount
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å = {players_stats[player1_id]['tokens']}")
    else:
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ò–≥—Ä–æ–∫ {player1_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ players_stats")
    
    pvp_games[game_id] = game
    active_players[player1_id] = game_id
    
    print(f"üéÆ –°–æ–∑–¥–∞–Ω–∞ PvP –∏–≥—Ä–∞ {game_id} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player1_name}")
    print(f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä –≤ pvp_games: {len(pvp_games)}")
    print(f"üéÆ –ö–ª—é—á–∏ –∏–≥—Ä: {list(pvp_games.keys())}")
    return game

def create_deck():
    """–°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
    deck = []
    suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
    values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    
    for suit in suits:
        for value in values:
            deck.append({
                'suit': suit,
                'value': value,
                'isRed': suit in ['‚ô•', '‚ô¶']
            })
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    import random
    random.shuffle(deck)
    return deck

def calculate_hand_value(hand):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ —Ä—É–∫–∏"""
    value = 0
    aces = 0
    
    for card in hand:
        if card['value'] == 'A':
            aces += 1
            value += 11
        elif card['value'] in ['K', 'Q', 'J']:
            value += 10
        else:
            value += int(card['value'])
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç—É–∑—ã
    while value > 21 and aces > 0:
        value -= 10
        aces -= 1
    
    return value

def join_pvp_game(game_id, player2_id, player2_name):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ PvP –∏–≥—Ä–µ"""
    global players_stats
    global pvp_games, active_players
    if game_id not in pvp_games:
        return {'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
    
    game = pvp_games[game_id]
    if game['state'] != 'waiting':
        return {'success': False, 'error': '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å'}
    
    if game['player1']['id'] == player2_id:
        return {'success': False, 'error': '–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è'}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ 2
    player2_stats = players_stats.get(player2_id, {})
    if player2_stats.get('tokens', 0) < game['player1']['bet']:
        return {'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $ANON –¥–ª—è —Å—Ç–∞–≤–∫–∏'}
    
    game['player2'] = {
        'id': player2_id,
        'name': player2_name,
        'hand': [],
        'bet': game['player1']['bet'],
        'ready': False
    }
    
    game['state'] = 'playing'
    game['current_turn'] = player2_id  # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    
    # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    game['player1']['hand'] = [game['deck'].pop(), game['deck'].pop()]
    game['player2']['hand'] = [game['deck'].pop(), game['deck'].pop()]
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏
    if player2_id in players_stats:
        players_stats[player2_id]['tokens'] -= game['player1']['bet']
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    if player2_id in active_players:
        del active_players[player2_id]
    
    print(f"üéÆ –ò–≥—Ä–æ–∫ {player2_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ {game_id}")
    return {'success': True, 'game': game}

def get_available_games(player_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã"""
    print(f"üîç get_available_games –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è player_id: {player_id}")
    print(f"üîç –í—Å–µ–≥–æ –∏–≥—Ä –≤ pvp_games: {len(pvp_games)}")
    print(f"üîç –ö–ª—é—á–∏ –∏–≥—Ä: {list(pvp_games.keys())}")
    
    available = []
    for game_id, game in pvp_games.items():
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—É {game_id}:")
        print(f"   - state: {game['state']}")
        print(f"   - player1_id: {game['player1']['id']}")
        print(f"   - player_id: {player_id}")
        
        if (game['state'] == 'waiting' and 
            game['player1']['id'] != player_id):
            available.append({
                'id': game_id,
                'player1_name': game['player1']['name'],
                'bet': game['player1']['bet'],
                'created_at': game['created_at']
            })
            print(f"   ‚úÖ –ò–≥—Ä–∞ {game_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ")
        else:
            print(f"   ‚ùå –ò–≥—Ä–∞ {game_id} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")
    
    print(f"üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(available)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä")
    return available

def make_pvp_move(game_id, player_id, action):
    """–î–µ–ª–∞–µ–º —Ö–æ–¥ –≤ PvP –∏–≥—Ä–µ"""
    global pvp_games, players_stats
    
    print(f"üéÆ make_pvp_move: game_id={game_id}, player_id={player_id}, action={action}")
    print(f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä –≤ pvp_games: {len(pvp_games)}")
    print(f"üéÆ –ö–ª—é—á–∏ –∏–≥—Ä: {list(pvp_games.keys())}")
    
    if game_id not in pvp_games:
        print(f"‚ùå –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
    
    game = pvp_games[game_id]
    print(f"üéÆ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞: state={game['state']}, current_turn={game.get('current_turn')}")
    
    if game['state'] != 'playing':
        print(f"‚ùå –ò–≥—Ä–∞ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'playing'")
        return {'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}
    
    if game['current_turn'] != player_id:
        return {'success': False, 'error': '–ù–µ –≤–∞—à —Ö–æ–¥'}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    player = None
    if game['player1']['id'] == player_id:
        player = game['player1']
    elif game['player2'] and game['player2']['id'] == player_id:
        player = game['player2']
    else:
        return {'success': False, 'error': '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã'}
    
    if action == 'hit':
        # –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É
        if len(game['deck']) > 0:
            player['hand'].append(game['deck'].pop())
            player_value = calculate_hand_value(player['hand'])
            
            if player_value > 21:
                # –ü–µ—Ä–µ–±–æ—Ä - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
                end_pvp_game(game_id, 'bust', player_id)
                return {'success': True, 'game': game, 'result': 'bust'}
            elif player_value == 21:
                # 21 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–æ–ø
                game['current_turn'] = get_opponent_id(game, player_id)
                return {'success': True, 'game': game, 'result': 'stand'}
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
                game['current_turn'] = get_opponent_id(game, player_id)
                return {'success': True, 'game': game}
    
    elif action == 'stand':
        # –°—Ç–æ–ø
        game['current_turn'] = get_opponent_id(game, player_id)
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥ "stand"
        if game['player1']['id'] == player_id:
            game['player1_stood'] = True
        elif game['player2']['id'] == player_id:
            game['player2_stood'] = True
            
        return {'success': True, 'game': game}
    
    elif action == 'double':
        # –£–¥–≤–æ–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —Ö–æ–¥—É)
        if len(player['hand']) != 2:
            return {'success': False, 'error': '–£–¥–≤–æ–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —Ö–æ–¥—É'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        player_stats = players_stats.get(player_id, {})
        if player_stats.get('tokens', 0) < player['bet']:
            return {'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $ANON –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è'}
        
        # –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        player['bet'] *= 2
        players_stats[player_id]['tokens'] -= player['bet'] // 2
        
        # –ë–µ—Ä–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        if len(game['deck']) > 0:
            player['hand'].append(game['deck'].pop())
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–æ–ø
        game['current_turn'] = get_opponent_id(game, player_id)
        return {'success': True, 'game': game, 'result': 'double'}
    
    return {'success': False, 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}

def get_opponent_id(game, player_id):
    """–ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"""
    if game['player1']['id'] == player_id:
        return game['player2']['id'] if game['player2'] else None
    else:
        return game['player1']['id']

def end_pvp_game(game_id, reason, winner_id=None):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º PvP –∏–≥—Ä—É"""
    global players_stats
    global pvp_games
    if game_id not in pvp_games:
        return
    
    game = pvp_games[game_id]
    game['state'] = 'finished'
    
    player1_value = calculate_hand_value(game['player1']['hand'])
    player2_value = calculate_hand_value(game['player2']['hand']) if game['player2'] else 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if reason == 'bust':
        winner_id = get_opponent_id(game, winner_id)
    elif reason == 'normal':
        if player1_value > player2_value:
            winner_id = game['player1']['id']
        elif player2_value > player1_value:
            winner_id = game['player2']['id']
        else:
            winner_id = None  # –ù–∏—á—å—è
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    total_pot = game['player1']['bet'] + game['player2']['bet']
    
    if winner_id:
        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫
        if winner_id in players_stats:
            players_stats[winner_id]['tokens'] += total_pot
    else:
        # –ù–∏—á—å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
        if game['player1']['id'] in players_stats:
            players_stats[game['player1']['id']]['tokens'] += game['player1']['bet']
        if game['player2']['id'] in players_stats:
            players_stats[game['player2']['id']]['tokens'] += game['player2']['bet']
    
    game['winner'] = winner_id
    game['result'] = reason
    game['final_values'] = {
        'player1': player1_value,
        'player2': player2_value
    }
    
    print(f"üéÆ –ò–≥—Ä–∞ {game_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        save_stats_to_gist()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def cleanup_old_games():
    """–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã"""
    current_time = datetime.now()
    games_to_remove = []
    
    print(f"üßπ cleanup_old_games: –ø—Ä–æ–≤–µ—Ä—è–µ–º {len(pvp_games)} –∏–≥—Ä")
    
    for game_id, game in pvp_games.items():
        created_time = datetime.fromisoformat(game['created_at'])
        age_seconds = (current_time - created_time).total_seconds()
        print(f"üßπ –ò–≥—Ä–∞ {game_id}: –≤–æ–∑—Ä–∞—Å—Ç {age_seconds:.0f} —Å–µ–∫—É–Ω–¥")
        
        if age_seconds > 3600:  # 1 —á–∞—Å
            games_to_remove.append(game_id)
            print(f"üßπ –ò–≥—Ä–∞ {game_id} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    for game_id in games_to_remove:
        del pvp_games[game_id]
        print(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∏–≥—Ä–∞ {game_id}")
    
    print(f"üßπ –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä: {len(pvp_games)}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
try:
    load_stats_from_gist()
    print("üöÄ API –∑–∞–ø—É—â–µ–Ω —Å GitHub Gist (urllib)")
except Exception as e:
    print(f"‚ö†Ô∏è API –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–∞–º—è—Ç–∏: {e}")

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if path == '/' or path == '/api':
                print(f"üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                print(f"   - GITHUB_TOKEN –Ω–∞–π–¥–µ–Ω: {bool(GITHUB_TOKEN)}")
                print(f"   - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(GITHUB_TOKEN) if GITHUB_TOKEN else 0}")
                print(f"   - –ò–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(players_stats)}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Gist
                load_stats_from_gist()
                
                github_status = "‚úÖ GitHub Gist" if GITHUB_TOKEN else "‚ùå NO TOKEN"
                
                data = {
                    'message': 'ANON Farm API',
                    'version': '7.3-diagnostic', 
                    'status': f'working {github_status}',
                    'total_players': len(players_stats),
                    'github_token_status': {
                        'present': bool(GITHUB_TOKEN),
                        'length': len(GITHUB_TOKEN) if GITHUB_TOKEN else 0,
                        'first_chars': GITHUB_TOKEN[:8] if GITHUB_TOKEN else 'MISSING'
                    },
                    'gist_url': f'https://gist.github.com/Razum200/{GIST_ID}',
                    'endpoints': {
                        'leaderboard': '/api/leaderboard',
                        'submit': '/api/submit_stats'
                    },
                    'timestamp': datetime.now().isoformat()
                }
                
            # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            elif path == '/api/leaderboard':
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Gist
                load_stats_from_gist()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
                sorted_players = sorted(
                    players_stats.values(),
                    key=lambda x: float(x.get('tokens', 0)),
                    reverse=True
                )[:10]
                
                leaderboard = []
                for i, player in enumerate(sorted_players):
                    leaderboard.append({
                        'rank': i + 1,
                        'name': player.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫'),
                        'tokens': float(player.get('tokens', 0)),
                        'tokens_formatted': format_number(player.get('tokens', 0)),
                        'level': int(player.get('level', 1))
                    })
                
                print(f"üìä –û—Ç–¥–∞–µ–º —Ç–æ–ø: {len(players_stats)} –∏–≥—Ä–æ–∫–æ–≤")
                
                data = {
                    'success': True,
                    'leaderboard': leaderboard,
                    'total_players': len(players_stats),
                    'storage': 'GitHub Gist' if GITHUB_TOKEN else 'Memory',
                    'updated_at': datetime.now().isoformat()
                }
            
            # 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            else:
                self.send_response(404)
                data = {
                    'error': 'Not Found',
                    'message': f'Endpoint {path} not found'
                }
                
            self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {'error': 'Internal Server Error', 'message': str(e)}
            self.wfile.write(json.dumps(data).encode())
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            path = urlparse(self.path).path
            
            if path == '/api/submit_stats':
                print(f"üì• –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/submit_stats")
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                player_data = json.loads(post_data.decode('utf-8'))
                
                print(f"üìä –î–ê–ù–ù–´–ï –ò–ì–†–û–ö–ê:")
                print(f"   - user_id: {player_data.get('user_id', '–ù–ï–¢')}")
                print(f"   - name: {player_data.get('name', '–ù–ï–¢')}")
                print(f"   - tokens: {player_data.get('tokens', '–ù–ï–¢')}")
                print(f"   - level: {player_data.get('level', '–ù–ï–¢')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
                player_id = player_data.get('user_id', 'unknown')
                old_count = len(players_stats)
                players_stats[player_id] = player_data
                new_count = len(players_stats)
                
                print(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ü–ê–ú–Ø–¢–¨:")
                print(f"   - –ë—ã–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {old_count}")
                print(f"   - –°—Ç–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {new_count}")
                print(f"   - ID –∏–≥—Ä–æ–∫–∞: {player_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub Gist (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)  
                print(f"üåê –ü–´–¢–ê–ï–ú–°–Ø –°–û–•–†–ê–ù–ò–¢–¨ –í GITHUB GIST...")
                print(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –í–´–ó–´–í–ê–ï–ú save_stats_to_gist()...")
                try:
                    save_stats_to_gist()
                    print(f"üîß save_stats_to_gist() –ó–ê–í–ï–†–®–ï–ù–ê")
                except Exception as e:
                    print(f"üí• –û–®–ò–ë–ö–ê –í save_stats_to_gist(): {e}")
                    import traceback
                    print(f"üí• –¢–†–ï–ô–°: {traceback.format_exc()}")
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                storage_info = "GitHub Gist" if GITHUB_TOKEN else "Memory only"
                
                data = {
                    'success': True,
                    'message': f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {storage_info}',
                    'total_players': len(players_stats),
                    'storage': storage_info,
                    'player_saved': {
                        'id': player_id,
                        'name': player_data.get('name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'),
                        'tokens': player_data.get('tokens', 0)
                    },
                    'github_token_present': bool(GITHUB_TOKEN)
                }
                
                print(f"‚úÖ –û–¢–í–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù: {data}")
                
                self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
            elif path == '/api/remove_player':
                print(f"üóëÔ∏è –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/remove_player")
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                player_id = request_data.get('player_id')
                
                if not player_id:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {
                        'success': False,
                        'error': 'player_id is required'
                    }
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                print(f"üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê:")
                print(f"   - player_id: {player_id}")
                print(f"   - –ò–≥—Ä–æ–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(players_stats)}")
                
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                result = remove_player_from_leaderboard(player_id)
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                print(f"‚úÖ –û–¢–í–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù: {result}")
                self.wfile.write(json.dumps(result, ensure_ascii=False).encode('utf-8'))
            
            # PvP endpoints
            elif path == '/api/pvp/create_game':
                print(f"üéÆ –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/pvp/create_game")
                
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                player_id = request_data.get('player_id')
                player_name = request_data.get('player_name')
                bet_amount = request_data.get('bet_amount', 10)
                
                if not player_id or not player_name:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': 'player_id –∏ player_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                player_stats = players_stats.get(player_id, {})
                if player_stats.get('tokens', 0) < bet_amount:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $ANON –¥–ª—è —Å—Ç–∞–≤–∫–∏'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–Ω—è—Ç–∞ –≤ create_pvp_game)
                game = create_pvp_game(player_id, player_name, bet_amount)
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {'success': True, 'game': game}
                self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
            elif path == '/api/pvp/join_game':
                print(f"üéÆ –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/pvp/join_game")
                
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                game_id = request_data.get('game_id')
                player_id = request_data.get('player_id')
                player_name = request_data.get('player_name')
                
                if not game_id or not player_id or not player_name:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': 'game_id, player_id –∏ player_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                result = join_pvp_game(game_id, player_id, player_name)
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                self.wfile.write(json.dumps(result, ensure_ascii=False).encode('utf-8'))
            
            elif path == '/api/pvp/make_move':
                print(f"üéÆ –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/pvp/make_move")
                
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                game_id = request_data.get('game_id')
                player_id = request_data.get('player_id')
                action = request_data.get('action')
                
                if not game_id or not player_id or not action:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': 'game_id, player_id –∏ action –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                result = make_pvp_move(game_id, player_id, action)
                
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
                if result.get('result') == 'bust':
                    end_pvp_game(game_id, 'bust', player_id)
                elif result.get('result') == 'stand':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                    game = pvp_games.get(game_id)
                    if game and game['state'] == 'playing':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–∞ –ª–∏ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ "stand"
                        player1_stood = len(game['player1']['hand']) > 2 and game.get('player1_stood', False)
                        player2_stood = len(game['player2']['hand']) > 2 and game.get('player2_stood', False)
                        
                        if player1_stood and player2_stood:
                            # –û–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
                            end_pvp_game(game_id, 'normal')
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                self.wfile.write(json.dumps(result, ensure_ascii=False).encode('utf-8'))
            
            elif path == '/api/pvp/get_games':
                print(f"üéÆ –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/pvp/get_games")
                
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                player_id = request_data.get('player_id')
                
                if not player_id:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': 'player_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã
                cleanup_old_games()
                
                available_games = get_available_games(player_id)
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {'success': True, 'games': available_games}
                self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
            elif path == '/api/pvp/get_game':
                print(f"üéÆ –ü–û–õ–£–ß–ï–ù POST –ó–ê–ü–†–û–° /api/pvp/get_game")
                
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                request_data = json.loads(post_data.decode('utf-8'))
                
                game_id = request_data.get('game_id')
                player_id = request_data.get('player_id')
                
                if not game_id or not player_id:
                    self.send_response(400)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': 'game_id –∏ player_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                if game_id not in pvp_games:
                    self.send_response(404)
                    self.send_header('Content-Type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    data = {'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
                    self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                    return
                
                game = pvp_games[game_id]
                
                # –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if game['state'] == 'playing':
                    if game['player1']['id'] == player_id:
                        opponent_hand = game['player2']['hand'] if game['player2'] else []
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                        if len(opponent_hand) > 1:
                            game['player2']['hand'] = [opponent_hand[0], {'hidden': True}]
                    elif game['player2'] and game['player2']['id'] == player_id:
                        opponent_hand = game['player1']['hand']
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                        if len(opponent_hand) > 1:
                            game['player1']['hand'] = [opponent_hand[0], {'hidden': True}]
                
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {'success': True, 'game': game}
                self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
            
            else:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                data = {'error': 'Not Found'}
                self.wfile.write(json.dumps(data).encode())
                
        except Exception as e:
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            data = {'error': 'POST Error', 'message': str(e)}
            self.wfile.write(json.dumps(data).encode())
        
    def do_OPTIONS(self):
        """CORS –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()