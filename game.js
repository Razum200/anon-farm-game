// –ò–≥—Ä–∞ ANON Farm - –ª–æ–≥–∏–∫–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
class AnonFarm {
    constructor() {
        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        this.gameData = {
            tokens: 0,
            level: 1,
            clickPower: 1,
            autoFarmPower: 0,
            multiplier: 1,
            totalClicks: 0,
            upgrades: {
                clickUpgrades: 0,
                autoUpgrades: 0,
                multiplierUpgrades: 0
            },
            lastSave: Date.now(),
            // –î–∞–Ω–Ω—ã–µ –æ–≥–æ—Ä–æ–¥–∞
            garden: {
                seeds: {
                    carrot: 0,
                    potato: 0, 
                    tomato: 0
                },
                plots: [
                    null, null, null,  // –°—Ç—Ä–æ–∫–∞ 1
                    null, null, null,  // –°—Ç—Ä–æ–∫–∞ 2
                    null, null, null   // –°—Ç—Ä–æ–∫–∞ 3
                ] // null = –ø—É—Å—Ç–∞—è, –æ–±—ä–µ–∫—Ç = {type: 'carrot', plantTime: timestamp, stage: 'planted/growing/ready'}
            }
        };

        // –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–π
        this.upgradeCosts = {
            click: 10,
            auto: 50,
            multiplier: 200
        };

        // –°–∏—Å—Ç–µ–º–∞ —Å–µ–º—è–Ω –¥–ª—è –æ–≥–æ—Ä–æ–¥–∞
        this.seedsConfig = {
            carrot: {
                name: '–ú–æ—Ä–∫–æ–≤—å',
                icon: 'ü•ï',
                price: 10,           // –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞ $ANON
                growthTime: 2 * 60,  // –í—Ä–µ–º—è —Ä–æ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
                reward: 20,          // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–∂–∞–π
                stages: {
                    planted: 'üå±',   // –¢–æ–ª—å–∫–æ –ø–æ—Å–∞–∂–µ–Ω–æ
                    growing: 'üåø',   // –†–∞—Å—Ç–µ—Ç
                    ready: 'ü•ï'      // –ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä—É
                }
            },
            potato: {
                name: '–ö–∞—Ä—Ç–æ—à–∫–∞',
                icon: 'ü•î',
                price: 25,
                growthTime: 5 * 60,  // 5 –º–∏–Ω—É—Ç
                reward: 60,
                stages: {
                    planted: 'üå±',
                    growing: 'üåø',
                    ready: 'ü•î'
                }
            },
            tomato: {
                name: '–ü–æ–º–∏–¥–æ—Ä',
                icon: 'üçÖ',
                price: 50,
                growthTime: 10 * 60, // 10 –º–∏–Ω—É—Ç
                reward: 150,
                stages: {
                    planted: 'üå±',
                    growing: 'üåø',
                    ready: 'üçÖ'
                }
            }
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        this.initTelegram();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.loadGame();
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        this.initGame();
    }

    initTelegram() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            this.tg.ready();
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            this.tg.expand();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ —Ç–µ–º—É Telegram
            this.tg.setHeaderColor('#667eea');
            this.tg.setBackgroundColor('#667eea');
            
            console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.tg.initDataUnsafe?.user);
        } else {
            console.log('–ó–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
        }
    }

    loadGame() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
            if (this.tg && this.tg.CloudStorage) {
                this.tg.CloudStorage.getItem('anonFarmData', (err, data) => {
                    if (!err && data) {
                        try {
                            const savedData = JSON.parse(data);
                            this.gameData = { ...this.gameData, ...savedData };
                            this.calculateOfflineProgress();
                            this.updateDisplay();
                            console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Telegram Cloud');
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
                        }
                    } else {
                        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    }
                });
            } else {
                // Fallback –Ω–∞ localStorage –µ—Å–ª–∏ –Ω–µ—Ç Telegram
                const savedData = localStorage.getItem('anonFarmData');
                if (savedData) {
                    this.gameData = { ...this.gameData, ...JSON.parse(savedData) };
                    this.calculateOfflineProgress();
                    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        
        this.updateDisplay();
    }

    saveGame() {
        try {
            this.gameData.lastSave = Date.now();
            const dataToSave = JSON.stringify(this.gameData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Telegram Cloud Storage
            if (this.tg && this.tg.CloudStorage) {
                this.tg.CloudStorage.setItem('anonFarmData', dataToSave, (err) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud:', err);
                        // Fallback –Ω–∞ localStorage
                        localStorage.setItem('anonFarmData', dataToSave);
                    } else {
                        console.log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Telegram Cloud');
                    }
                });
            } else {
                // Fallback –Ω–∞ localStorage
                localStorage.setItem('anonFarmData', dataToSave);
                console.log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }

    calculateOfflineProgress() {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
        const timeDiff = Date.now() - this.gameData.lastSave;
        const secondsOffline = Math.floor(timeDiff / 1000);
        
        if (secondsOffline > 0 && this.gameData.autoFarmPower > 0) {
            const offlineEarnings = secondsOffline * this.gameData.autoFarmPower * this.gameData.multiplier;
            this.gameData.tokens += offlineEarnings;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–µ
            if (offlineEarnings > 0) {
                this.showNotification(`–î–æ–±—ã—Ç–æ –æ—Ñ–ª–∞–π–Ω: ${this.formatNumber(offlineEarnings)} $ANON!`);
            }
        }
    }

    initGame() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        const farmButton = document.getElementById('farmButton');
        farmButton.addEventListener('click', (e) => this.clickFarm(e));
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç double-tap zoom –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        farmButton.addEventListener('touchend', (e) => {
            e.preventDefault();
            this.clickFarm(e);
        }, { passive: false });
        document.getElementById('upgradeClick').addEventListener('click', () => this.buyUpgrade('click'));
        document.getElementById('upgradeAuto').addEventListener('click', () => this.buyUpgrade('auto'));
        document.getElementById('upgradeMultiplier').addEventListener('click', () => this.buyUpgrade('multiplier'));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        this.initPageNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–≥–æ—Ä–æ–¥
        this.initGarden();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ñ–µ—Ä–º—É
        this.startAutoFarm();
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.saveGame();
            this.saveToLocalLeaderboard();
        }, 30000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.updatePlantGrowth();
        }, 5000);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        setInterval(() => {
            console.log('‚è±Ô∏è –¢–∞–π–º–µ—Ä 2 –º–∏–Ω—É—Ç—ã: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
            this.sendPlayerStats();
            this.submitStatsToAPI();
        }, 120000);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        setTimeout(() => {
            console.log('‚è±Ô∏è –¢–∞–π–º–µ—Ä 10 —Å–µ–∫—É–Ω–¥: –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            this.sendPlayerStats();
            this.submitStatsToAPI();
        }, 10000);

        // –ü–∏–Ω–≥ API –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª
        setInterval(() => {
            console.log('üèì –ü–∏–Ω–≥ API —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª...');
            this.pingAPI();
        }, 300000); // 5 –º–∏–Ω—É—Ç
        
        console.log('–ò–≥—Ä–∞ ANON Farm –∑–∞–ø—É—â–µ–Ω–∞!');
    }

    clickFarm(event) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∑–∞ –∫–ª–∏–∫
        const earnings = this.gameData.clickPower * this.gameData.multiplier;
        this.gameData.tokens += earnings;
        this.gameData.totalClicks += 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        this.updateLevel();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.showClickEffect(event, earnings);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø –∫–∞–∂–¥—ã–µ 10 –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (this.gameData.tokens % 10 === 0) {
            this.saveToLocalLeaderboard();
        }
        
        // –í–∏–±—Ä–∞—Ü–∏—è –≤ Telegram
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('light');
        }
    }

    buyUpgrade(type) {
        const cost = this.getUpgradeCost(type);
        
        if (this.gameData.tokens >= cost) {
            this.gameData.tokens -= cost;
            
            switch (type) {
                case 'click':
                    this.gameData.clickPower += 1;
                    this.gameData.upgrades.clickUpgrades++;
                    break;
                case 'auto':
                    this.gameData.autoFarmPower += 1;
                    this.gameData.upgrades.autoUpgrades++;
                    break;
                case 'multiplier':
                    this.gameData.multiplier += 1;
                    this.gameData.upgrades.multiplierUpgrades++;
                    break;
            }
            
            this.updateLevel();
            this.updateDisplay();
            this.saveGame();
            this.saveToLocalLeaderboard();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ! üéâ`);
            
            // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
            if (this.tg && this.tg.HapticFeedback) {
                this.tg.HapticFeedback.notificationOccurred('success');
            }
        } else {
            // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù—É–∂–Ω–æ –µ—â–µ ${this.formatNumber(cost - this.gameData.tokens)}`);
            
            if (this.tg && this.tg.HapticFeedback) {
                this.tg.HapticFeedback.notificationOccurred('error');
            }
        }
    }

    getUpgradeCost(type) {
        const baseState = this.upgradeCosts[type];
        const upgradeCount = this.gameData.upgrades[type + 'Upgrades'] || 0;
        return Math.floor(baseState * Math.pow(1.5, upgradeCount));
    }

    updateLevel() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
        const totalUpgrades = Object.values(this.gameData.upgrades).reduce((a, b) => a + b, 0);
        this.gameData.level = Math.floor(totalUpgrades / 3) + 1;
    }

    startAutoFarm() {
        setInterval(() => {
            if (this.gameData.autoFarmPower > 0) {
                const autoEarnings = this.gameData.autoFarmPower * this.gameData.multiplier;
                this.gameData.tokens += autoEarnings;
                this.updateDisplay();
            }
        }, 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }

    showClickEffect(event, amount) {
        const effect = document.createElement('div');
        effect.className = 'click-effect';
        effect.textContent = '+' + this.formatNumber(amount);
        
        // –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–∞
        const rect = event.target.getBoundingClientRect();
        effect.style.left = (rect.left + rect.width / 2) + 'px';
        effect.style.top = (rect.top + rect.height / 2) + 'px';
        
        document.body.appendChild(effect);
        
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, 1000);
    }

    showNotification(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        if (this.tg && this.tg.showAlert) {
            this.tg.showAlert(message);
        } else {
            // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π alert
            alert(message);
        }
    }

    updateDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('tokens').textContent = this.formatNumber(this.gameData.tokens);
        document.getElementById('perClick').textContent = this.formatNumber(this.gameData.clickPower * this.gameData.multiplier);
        document.getElementById('level').textContent = this.gameData.level;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–π
        document.getElementById('upgradeClickCost').textContent = this.formatNumber(this.getUpgradeCost('click'));
        document.getElementById('upgradeAutoCost').textContent = this.formatNumber(this.getUpgradeCost('auto'));
        document.getElementById('upgradeMultiplierCost').textContent = this.formatNumber(this.getUpgradeCost('multiplier'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
        this.updateUpgradeButtons();
    }

    updateUpgradeButtons() {
        const upgradeButtons = [
            { id: 'upgradeClick', type: 'click' },
            { id: 'upgradeAuto', type: 'auto' },
            { id: 'upgradeMultiplier', type: 'multiplier' }
        ];
        
        upgradeButtons.forEach(button => {
            const element = document.getElementById(button.id);
            const cost = this.getUpgradeCost(button.type);
            element.disabled = this.gameData.tokens < cost;
        });
    }

    formatNumber(num) {
        if (num >= 1000000000) {
            return (num / 1000000000).toFixed(1) + 'B';
        }
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        }
        if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return Math.floor(num).toString();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
    sendPlayerStats() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        console.log('Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω:', !!this.tg);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', this.tg?.initDataUnsafe?.user);
        
        if (!this.tg || !this.tg.initDataUnsafe?.user) {
            console.log('‚ùå Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            console.log('üí° –ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!');
            return;
        }
        
        console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram –≥—Ä—É–ø–ø—É...');

        const user = this.tg.initDataUnsafe.user;
        const stats = {
            player_id: user.id,
            username: user.username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–≥—Ä–æ–∫',
            first_name: user.first_name || '–ê–Ω–æ–Ω–∏–º',
            tokens: this.gameData.tokens,
            level: this.gameData.level,
            click_power: this.gameData.clickPower,
            auto_power: this.gameData.autoFarmPower,
            multiplier: this.gameData.multiplier,
            total_upgrades: Object.values(this.gameData.upgrades).reduce((a, b) => a + b, 0),
            timestamp: Date.now()
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
        const BOT_TOKEN = '8459622700:AAFHx3Lv3eghzrlkyH-VLk5GwTZpx2AbEBM'; // –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        const CHAT_ID = '-1002719894591'; // ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        if (BOT_TOKEN !== 'YOUR_BOT_TOKEN') {
            const message = `üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:\n` +
                          `üë§ ${stats.first_name} (@${stats.username || '–∞–Ω–æ–Ω–∏–º–Ω–æ'})\n` +
                          `üí∞ –¢–æ–∫–µ–Ω—ã: ${this.formatNumber(stats.tokens)}\n` +
                          `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${stats.level}\n` +
                          `‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: ${stats.click_power}\n` +
                          `üîÑ –ê–≤—Ç–æ—Ñ–µ—Ä–º–∞: ${stats.auto_power}/—Å–µ–∫\n` +
                          `‚ú® –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${stats.multiplier}\n` +
                          `üõ†Ô∏è –£–ª—É—á—à–µ–Ω–∏–π: ${stats.total_upgrades}`;

            fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            }).then(response => {
                if (response.ok) {
                    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –≥—Ä—É–ø–ø—É!');
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', response.status);
                }
            }).catch(err => console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err));
        }

        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:', stats);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
    async showLeaderboard() {
        console.log('üèÜ –ó–∞–ø—Ä–æ—Å —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤...');
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø —á–µ—Ä–µ–∑ API —Å —Ç–∞–π–º–∞—É—Ç–æ–º (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('https://anon-farm-api.vercel.app/api/leaderboard', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.leaderboard.length > 0) {
                    let message = 'üèÜ ANON Farm - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n';
                    
                    data.leaderboard.forEach((player, index) => {
                        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${player.rank}.`;
                        message += `${medal} ${player.name}\n`;
                        message += `üí∞ ${player.tokens_formatted} $ANON\n`;
                        message += `üèÜ –£—Ä–æ–≤–µ–Ω—å ${player.level}\n\n`;
                    });
                    
                    message += `üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${data.total_players}\n`;
                    message += `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ\n\n`;
                    message += 'üî• Stay $ANON!';
                    
                    if (this.tg && this.tg.showAlert) {
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ popup
                        setTimeout(() => {
                            try {
                                this.tg.showAlert(message);
                            } catch (error) {
                                console.log('Popup –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏:', message);
                            }
                        }, 500);
                    } else {
                        alert(message);
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ–Ω–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞
                    this.submitStatsToAPI().catch(err => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err));
                    return;
                } else if (data.success) {
                    // API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–æ–ø –ø—É—Å—Ç–æ–π
                    const emptyMessage = 'üèÜ ANON Farm - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n' +
                                       'üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n' +
                                       'üöÄ –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —Ç–æ–ø–µ!\n\n' +
                                       'üí° –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥\n\n' +
                                       'üî• Stay $ANON!';
                    
                    if (this.tg && this.tg.showAlert) {
                        setTimeout(() => {
                            try {
                                this.tg.showAlert(emptyMessage);
                            } catch (error) {
                                console.log('Popup –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—É—Å—Ç–æ–π —Ç–æ–ø –≤ –∫–æ–Ω—Å–æ–ª–∏:', emptyMessage);
                            }
                        }, 500);
                    } else {
                        alert(emptyMessage);
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ–Ω–µ
                    this.submitStatsToAPI().catch(err => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err));
                    return;
                } else {
                    // API –≤–µ—Ä–Ω—É–ª success: false
                    throw new Error(`API Error: ${data.error || 'Unknown error'}`);
                }
            } else {
                // HTTP –æ—à–∏–±–∫–∞ (–Ω–µ 200 —Å—Ç–∞—Ç—É—Å)
                throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
            }
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞:', error);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            let errorType = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            if (error.name === 'AbortError') {
                errorType = '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç (10 —Å–µ–∫—É–Ω–¥)';
            } else if (error.message.includes('HTTP Error')) {
                errorType = error.message;
            } else if (error.message.includes('API Error')) {
                errorType = error.message;
            } else if (error.message.includes('fetch')) {
                errorType = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
            const errorMessage = 'üèÜ ANON Farm - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n' +
                               '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø\n\n' +
                               `üîç –ü—Ä–∏—á–∏–Ω–∞: ${errorType}\n` +
                               'üåê API: anon-farm-api.vercel.app\n\n' +
                               'üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø:\n\n' +
                               this.getLocalTopText() +
                               '\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n' +
                               'üî• Stay $ANON!';
            
            if (this.tg && this.tg.showAlert) {
                setTimeout(() => {
                    try {
                        this.tg.showAlert(errorMessage);
                    } catch (error) {
                        console.log('Popup –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', errorMessage);
                    }
                }, 500);
            } else {
                alert(errorMessage);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ–Ω–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.submitStatsToAPI().catch(err => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err));
            return;
        }
        
        // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø
        this.showLocalLeaderboard();
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø
    showLocalLeaderboard() {
        const localTop = this.getLocalLeaderboard();
        let message = 'üèÜ ANON Farm - –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n';
        
        if (localTop.length > 0) {
            message += 'üì± –õ—É—á—à–∏–µ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:\n';
            localTop.slice(0, 5).forEach((player, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                message += `${medal} ${player.name}: ${this.formatNumber(player.tokens)} $ANON\n`;
            });
            message += '\n‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        } else {
            message += 'üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö\n';
            message += 'üéÆ –ü–æ–∏–≥—Ä–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ —Ç–æ–ø –ø–æ—è–≤–∏—Ç—Å—è!';
        }
        
        message += '\n\nüî• Stay $ANON!';
        
        if (this.tg && this.tg.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ API
    async submitStatsToAPI() {
        if (!this.tg || !this.tg.initDataUnsafe?.user) return;

        const user = this.tg.initDataUnsafe.user;
        const statsData = {
            player_id: user.id,
            name: user.first_name || '–ê–Ω–æ–Ω–∏–º',
            tokens: this.gameData.tokens,
            level: this.gameData.level
        };

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            await fetch('https://anon-farm-api.vercel.app/api/submit_stats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(statsData),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ API:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API —Å–µ—Ä–≤–µ—Ä–∞
    async checkApiStatus() {
        const loadingMessage = 'üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...\n\n‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–ª–∞—á–Ω–æ–º—É API...';
        
        if (this.tg && this.tg.showAlert) {
            try {
                this.tg.showAlert(loadingMessage);
            } catch (error) {
                console.log('Popup –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ checkApiStatus:', error);
            }
        }

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('https://anon-farm-api.vercel.app/', {
                method: 'GET',
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);

            if (response.ok) {
                const data = await response.json();
                const message = '‚úÖ API –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n' +
                              `üìä –í–µ—Ä—Å–∏—è: ${data.version}\n` +
                              'üåê –ê–¥—Ä–µ—Å: anon-farm-api.vercel.app\n' +
                              'üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω\n\n' +
                              'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"!\n\n' +
                              'üî• Stay $ANON!';
                
                if (this.tg && this.tg.showAlert) {
                    try {
                        this.tg.showAlert(message);
                    } catch (error) {
                        console.log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ popup —Ç–æ–ø–∞:', error);
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ console –∫–∞–∫ fallback
                        console.log('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', message);
                    }
                } else {
                    alert(message);
                }
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            const message = '‚ùå –û–±–ª–∞—á–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n' +
                          'üåê URL: anon-farm-api.vercel.app\n' +
                          'üîß –í–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã Vercel\n\n' +
                          'üì± –ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø\n' +
                          'üí¨ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –≤ Telegram –≥—Ä—É–ø–ø–µ\n\n' +
                          `üêõ –û—à–∏–±–∫–∞: ${error.message}\n\n` +
                          'üî• Stay $ANON!';
            
            if (this.tg && this.tg.showAlert) {
                try {
                    this.tg.showAlert(message);
                } catch (error) {
                    console.log('Popup –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ checkApiStatus –æ—à–∏–±–∫–∞:', error);
                    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API:', message);
                }
            } else {
                alert(message);
            }
            
            console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        }
    }

    // –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    requestLeaderboard() {
        const BOT_TOKEN = '8459622700:AAFHx3Lv3eghzrlkyH-VLk5GwTZpx2AbEBM';
        const CHAT_ID = '-1002719894591';
        
        const message = 'üèÜ –ó–ê–ü–†–û–° –¢–û–ü–ê –ò–ì–†–û–ö–û–í\n\n' +
                       'üë§ –ò–≥—Ä–æ–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –ª–∏–¥–µ—Ä–æ–≤ ANON Farm!\n' +
                       'üìä –ü–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ø-10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º\n\n' +
                       '‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ' + new Date().toLocaleString('ru-RU');

        fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        }).catch(err => console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ø–∞:', err));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
    getLocalLeaderboard() {
        try {
            const savedData = localStorage.getItem('anonFarmLeaderboard');
            if (savedData) {
                return JSON.parse(savedData).sort((a, b) => b.tokens - a.tokens);
            }
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞:', e);
        }
        return [];
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞ –≤ —Ç–µ–∫—Å—Ç
    getLocalTopText() {
        const localTop = this.getLocalLeaderboard();
        if (localTop.length > 0) {
            let text = '';
            localTop.slice(0, 3).forEach((player, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                text += `${medal} ${player.name}: ${this.formatNumber(player.tokens)}\n`;
            });
            return text.trim();
        } else {
            return 'üìä –ü–æ–∫–∞ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\nüéÆ –ü–æ–∏–≥—Ä–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!';
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø
    saveToLocalLeaderboard() {
        if (!this.tg || !this.tg.initDataUnsafe?.user) return;

        const user = this.tg.initDataUnsafe.user;
        const playerData = {
            id: user.id,
            name: user.first_name || '–ê–Ω–æ–Ω–∏–º',
            username: user.username || '',
            tokens: this.gameData.tokens,
            level: this.gameData.level,
            lastUpdate: Date.now()
        };

        try {
            let leaderboard = this.getLocalLeaderboard();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            const existingIndex = leaderboard.findIndex(p => p.id === user.id);
            if (existingIndex >= 0) {
                leaderboard[existingIndex] = playerData;
            } else {
                leaderboard.push(playerData);
            }

            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-50 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            leaderboard = leaderboard.sort((a, b) => b.tokens - a.tokens).slice(0, 50);
            
            localStorage.setItem('anonFarmLeaderboard', JSON.stringify(leaderboard));
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø:', e);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    initPageNavigation() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navTabs = document.querySelectorAll('.nav-tab');
        
        navTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const pageName = tab.getAttribute('data-page');
                this.showPage(pageName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                navTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
        const tabButtons = document.querySelectorAll('.tab-button');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabName = button.getAttribute('data-tab');
                this.showLeaderboardTab(tabName);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                tabButtons.forEach(b => b.classList.remove('active'));
                button.classList.add('active');
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        this.updateProfile();
        
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    // –ü–æ–∫–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    showPage(pageName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pages = document.querySelectorAll('.page');
        pages.forEach(page => page.classList.remove('active'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(pageName + 'Page');
        if (targetPage) {
            targetPage.classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (pageName === 'profile') {
                this.updateProfile();
            } else if (pageName === 'leaderboard') {
                this.loadLeaderboards();
            } else if (pageName === 'garden') {
                this.updateGardenDisplay();
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ –≤ —Ç–æ–ø–µ –∏–≥—Ä–æ–∫–æ–≤
    showLeaderboardTab(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
        const tabContents = document.querySelectorAll('.tab-content');
        tabContents.forEach(content => content.classList.remove('active'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
        const targetTab = document.getElementById(tabName + 'Leaderboard');
        if (targetTab) {
            targetTab.classList.add('active');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    updateProfile() {
        try {
            const user = this.tg?.initDataUnsafe?.user;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ ID
            if (user) {
                document.getElementById('profileName').textContent = user.first_name || '–ê–Ω–æ–Ω–∏–º';
                document.getElementById('profileId').textContent = `ID: ${user.id}`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('profileTokens').textContent = this.formatNumber(this.gameData.tokens);
            document.getElementById('profileLevel').textContent = this.gameData.level;
            document.getElementById('profileClicks').textContent = this.formatNumber(this.gameData.totalClicks || 0);
            document.getElementById('profileUpgrades').textContent = 
                (this.gameData.upgrades.clickUpgrades || 0) + (this.gameData.upgrades.autoUpgrades || 0) + (this.gameData.upgrades.multiplierUpgrades || 0);
            document.getElementById('profileClickPower').textContent = this.gameData.clickPower;
            document.getElementById('profileAutoRate').textContent = this.gameData.autoFarmPower + '/—Å–µ–∫';
            
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–æ–≤
    loadLeaderboards() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –ø–æ —Ç–æ–∫–µ–Ω–∞–º (—É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
        this.loadTokensLeaderboard();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –ø–æ —É—Ä–æ–≤–Ω—è–º
        this.loadLevelLeaderboard();
    }

    // –¢–æ–ø –ø–æ —Ç–æ–∫–µ–Ω–∞–º (–∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    async loadTokensLeaderboard() {
        const container = document.getElementById('tokensLeaderboard');
        container.innerHTML = '<p>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –ø–æ —Ç–æ–∫–µ–Ω–∞–º...</p>';
        
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000);
            
            const response = await fetch('https://anon-farm-api.vercel.app/api/leaderboard', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.leaderboard.length > 0) {
                    let html = '';
                    data.leaderboard.forEach((player, index) => {
                        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${player.rank}.`;
                        html += `
                            <div class="leaderboard-item">
                                <span class="rank">${medal}</span>
                                <span class="name">${player.name}</span>
                                <span class="tokens">${player.tokens_formatted} $ANON</span>
                            </div>
                        `;
                    });
                    html += `<p class="leaderboard-footer">üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${data.total_players}</p>`;
                    container.innerHTML = html;
                } else {
                    container.innerHTML = '<p>üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>';
                }
            }
        } catch (error) {
            container.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º</p>';
        }
    }

    // –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—è–º (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    async loadLevelLeaderboard() {
        const container = document.getElementById('levelLeaderboard');
        container.innerHTML = '<p>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –ø–æ —É—Ä–æ–≤–Ω—è–º...</p>';
        
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000);
            
            const response = await fetch('https://anon-farm-api.vercel.app/api/leaderboard', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.leaderboard.length > 0) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
                    const levelSorted = [...data.leaderboard].sort((a, b) => b.level - a.level);
                    
                    let html = '';
                    levelSorted.forEach((player, index) => {
                        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                        html += `
                            <div class="leaderboard-item">
                                <span class="rank">${medal}</span>
                                <span class="name">${player.name}</span>
                                <span class="level">–£—Ä–æ–≤–µ–Ω—å ${player.level}</span>
                            </div>
                        `;
                    });
                    html += `<p class="leaderboard-footer">üèÜ –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${data.total_players}</p>`;
                    container.innerHTML = html;
                } else {
                    container.innerHTML = '<p>üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>';
                }
            }
        } catch (error) {
            container.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º</p>';
        }
    }

    // –ü–∏–Ω–≥ API —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª
    async pingAPI() {
        try {
            // –ü–∏–Ω–≥—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const controller1 = new AbortController();
            const timeoutId1 = setTimeout(() => controller1.abort(), 5000);
            
            const response1 = await fetch('https://anon-farm-api.vercel.app/', {
                method: 'GET',
                signal: controller1.signal
            });
            
            clearTimeout(timeoutId1);
            
            // –ü–∏–Ω–≥—É–µ–º leaderboard –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            const controller2 = new AbortController();
            const timeoutId2 = setTimeout(() => controller2.abort(), 5000);
            
            const response2 = await fetch('https://anon-farm-api.vercel.app/api/leaderboard', {
                method: 'GET',
                signal: controller2.signal
            });
            
            clearTimeout(timeoutId2);
            
            if (response1.ok && response2.ok) {
                console.log('üèì API –¥–≤–æ–π–Ω–æ–π –ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–µ—Ä –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } else {
                console.log('‚ö†Ô∏è API –ø–∏–Ω–≥ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω:', response1.status, response2.status);
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('‚è∞ API –ø–∏–Ω–≥ - —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥');
            } else {
                console.log('‚ùå API –ø–∏–Ω–≥ - –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
            }
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –û–ì–û–†–û–î–ê =====
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥–æ—Ä–æ–¥–∞
    initGarden() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Å–µ–º—è–Ω
        document.querySelectorAll('.seed-buy-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const seedType = e.target.closest('.seed-item').getAttribute('data-seed');
                this.buySeed(seedType);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥—Ä—è–¥–æ–∫
        document.querySelectorAll('.garden-plot').forEach(plot => {
            plot.addEventListener('click', (e) => {
                const plotIndex = parseInt(e.target.closest('.garden-plot').getAttribute('data-plot'));
                this.handlePlotClick(plotIndex);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–∞–¥–∫–∏
        document.querySelectorAll('.selection-seed').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const seedType = e.target.getAttribute('data-seed');
                this.plantSeedOnSelectedPlot(seedType);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
        document.querySelector('.selection-cancel').addEventListener('click', () => {
            this.hideSeedSelection();
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–≥–æ—Ä–æ–¥–∞
        this.updateGardenDisplay();
        
        console.log('üå± –û–≥–æ—Ä–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü–æ–∫—É–ø–∫–∞ —Å–µ–º—è–Ω
    buySeed(seedType) {
        const seedConfig = this.seedsConfig[seedType];
        if (!seedConfig) return;

        if (this.gameData.tokens >= seedConfig.price) {
            this.gameData.tokens -= seedConfig.price;
            this.gameData.garden.seeds[seedType]++;
            
            this.updateDisplay();
            this.updateGardenDisplay();
            this.saveGame();
            
            this.showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${seedConfig.name} –∑–∞ ${seedConfig.price} $ANON! üå±`);
            
            // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
            if (this.tg && this.tg.HapticFeedback) {
                this.tg.HapticFeedback.notificationOccurred('success');
            }
        } else {
            this.showNotification(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù—É–∂–Ω–æ ${seedConfig.price} $ANON`);
            
            if (this.tg && this.tg.HapticFeedback) {
                this.tg.HapticFeedback.notificationOccurred('error');
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä—è–¥–∫–µ
    handlePlotClick(plotIndex) {
        const plot = this.gameData.garden.plots[plotIndex];
        
        if (!plot) {
            // –ü—É—Å—Ç–∞—è –≥—Ä—è–¥–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ–º—è–Ω
            this.selectedPlotIndex = plotIndex;
            this.showSeedSelection();
        } else if (plot.stage === 'ready') {
            // –ì–æ—Ç–æ–≤—ã–π —É—Ä–æ–∂–∞–π - —Å–æ–±–∏—Ä–∞–µ–º
            this.harvestPlot(plotIndex);
        }
        // –ï—Å–ª–∏ —Ä–∞—Å—Ç–µ—Ç - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–µ–º—è–Ω –¥–ª—è –ø–æ—Å–∞–¥–∫–∏
    showSeedSelection() {
        this.updateSeedSelectionButtons();
        document.getElementById('seedSelection').style.display = 'block';
    }

    // –°–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —Å–µ–º—è–Ω
    hideSeedSelection() {
        document.getElementById('seedSelection').style.display = 'none';
        this.selectedPlotIndex = null;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ–º—è–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ)
    updateSeedSelectionButtons() {
        document.querySelectorAll('.selection-seed').forEach(btn => {
            const seedType = btn.getAttribute('data-seed');
            const seedCount = this.gameData.garden.seeds[seedType] || 0;
            
            btn.disabled = seedCount === 0;
            btn.style.opacity = seedCount > 0 ? '1' : '0.5';
        });
    }

    // –ü–æ—Å–∞–¥–∏—Ç—å —Å–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—è–¥–∫—É
    plantSeedOnSelectedPlot(seedType) {
        if (this.selectedPlotIndex === null) return;
        
        const seedCount = this.gameData.garden.seeds[seedType] || 0;
        if (seedCount === 0) return;

        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º—è–Ω
        this.gameData.garden.seeds[seedType]--;

        // –°–∞–∂–∞–µ–º –Ω–∞ –≥—Ä—è–¥–∫—É
        this.gameData.garden.plots[this.selectedPlotIndex] = {
            type: seedType,
            plantTime: Date.now(),
            stage: 'planted'
        };

        this.updateGardenDisplay();
        this.hideSeedSelection();
        this.saveGame();

        const seedConfig = this.seedsConfig[seedType];
        this.showNotification(`–ü–æ—Å–∞–∂–µ–Ω–æ: ${seedConfig.name}! üå±`);
        
        // –í–∏–±—Ä–∞—Ü–∏—è
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('light');
        }
    }

    // –°–±–æ—Ä —É—Ä–æ–∂–∞—è
    harvestPlot(plotIndex) {
        const plot = this.gameData.garden.plots[plotIndex];
        if (!plot || plot.stage !== 'ready') return;

        const seedConfig = this.seedsConfig[plot.type];
        const reward = seedConfig.reward * this.gameData.multiplier;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
        this.gameData.tokens += reward;

        // –û—á–∏—â–∞–µ–º –≥—Ä—è–¥–∫—É
        this.gameData.garden.plots[plotIndex] = null;

        this.updateDisplay();
        this.updateGardenDisplay();
        this.saveGame();

        this.showNotification(`–£—Ä–æ–∂–∞–π —Å–æ–±—Ä–∞–Ω! +${this.formatNumber(reward)} $ANON! üéâ`);
        
        // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.notificationOccurred('success');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π
    updatePlantGrowth() {
        let hasChanges = false;
        const now = Date.now();

        this.gameData.garden.plots.forEach((plot, index) => {
            if (!plot) return;

            const seedConfig = this.seedsConfig[plot.type];
            const timePassed = (now - plot.plantTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            const growthTime = seedConfig.growthTime;
            const halfGrowthTime = growthTime / 2;

            let newStage = plot.stage;

            if (timePassed >= growthTime) {
                newStage = 'ready';
            } else if (timePassed >= halfGrowthTime) {
                newStage = 'growing';
            } else {
                newStage = 'planted';
            }

            if (newStage !== plot.stage) {
                plot.stage = newStage;
                hasChanges = true;
            }
        });

        if (hasChanges) {
            this.updateGardenDisplay();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–≥–æ—Ä–æ–¥–∞
    updateGardenDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–µ–º—è–Ω
        Object.keys(this.gameData.garden.seeds).forEach(seedType => {
            const countElement = document.getElementById(seedType + 'Seeds');
            if (countElement) {
                countElement.textContent = this.gameData.garden.seeds[seedType];
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—è–¥–∫–∏
        this.gameData.garden.plots.forEach((plot, index) => {
            const plotElement = document.querySelector(`[data-plot="${index}"]`);
            if (!plotElement) return;

            const contentElement = plotElement.querySelector('.plot-content');
            
            if (!plot) {
                // –ü—É—Å—Ç–∞—è –≥—Ä—è–¥–∫–∞
                contentElement.innerHTML = '<div class="plot-empty">üìç</div>';
                plotElement.className = 'garden-plot';
            } else {
                // –ì—Ä—è–¥–∫–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º
                const seedConfig = this.seedsConfig[plot.type];
                const stageIcon = seedConfig.stages[plot.stage];
                
                let timerHtml = '';
                if (plot.stage !== 'ready') {
                    const now = Date.now();
                    const timePassed = (now - plot.plantTime) / 1000;
                    const timeLeft = Math.max(0, seedConfig.growthTime - timePassed);
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = Math.floor(timeLeft % 60);
                    timerHtml = `<div class="plot-timer">${minutes}:${seconds.toString().padStart(2, '0')}</div>`;
                }
                
                contentElement.innerHTML = `
                    <div class="plot-${plot.stage}">${stageIcon}</div>
                    ${timerHtml}
                `;
                
                plotElement.className = `garden-plot plot-${plot.stage}`;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Å–µ–º—è–Ω
        document.querySelectorAll('.seed-buy-btn').forEach(btn => {
            const seedItem = btn.closest('.seed-item');
            const seedType = seedItem.getAttribute('data-seed');
            const seedConfig = this.seedsConfig[seedType];
            
            btn.disabled = this.gameData.tokens < seedConfig.price;
        });
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ANON Farm...');
    window.anonFarm = new AnonFarm();
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.anonFarm) {
        window.anonFarm.saveGame();
    }
});