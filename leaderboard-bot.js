// –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤ ANON Farm
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–ø–∞

const https = require('https');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const BOT_TOKEN = '8459622700:AAFHx3Lv3eghzrlkyH-VLk5GwTZpx2AbEBM';
const CHAT_ID = '-1002719894591';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let playersStats = new Map();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
function sendMessage(text) {
    const data = JSON.stringify({
        chat_id: CHAT_ID,
        text: text,
        parse_mode: 'HTML'
    });

    const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: `/bot${BOT_TOKEN}/sendMessage`,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': data.length
        }
    };

    const req = https.request(options, (res) => {
        console.log(`–°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
    });

    req.on('error', (error) => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    });

    req.write(data);
    req.end();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
    if (num >= 1000000000) {
        return (num / 1000000000).toFixed(1) + 'B';
    }
    if (num >= 1000000) {
        return (num / 1000000).toFixed(1) + 'M';
    }
    if (num >= 1000) {
        return (num / 1000).toFixed(1) + 'K';
    }
    return Math.floor(num).toString();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
function processPlayerStats(message) {
    // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const lines = message.split('\n');
    if (lines[0] !== 'üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:') return;

    try {
        const nameMatch = lines[1].match(/üë§ (.+?) \(@(.+?)\)/);
        const tokensMatch = lines[2].match(/üí∞ –¢–æ–∫–µ–Ω—ã: (.+)/);
        const levelMatch = lines[3].match(/üèÜ –£—Ä–æ–≤–µ–Ω—å: (\d+)/);

        if (nameMatch && tokensMatch && levelMatch) {
            const playerId = nameMatch[2]; // username –∫–∞–∫ ID
            const playerName = nameMatch[1];
            const tokens = parseFloat(tokensMatch[1].replace(/[KMB]/g, '')) * 
                          (tokensMatch[1].includes('K') ? 1000 : 
                           tokensMatch[1].includes('M') ? 1000000 : 
                           tokensMatch[1].includes('B') ? 1000000000 : 1);
            const level = parseInt(levelMatch[1]);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            playersStats.set(playerId, {
                name: playerName,
                tokens: tokens,
                level: level,
                lastUpdate: Date.now()
            });

            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${playerName} - ${formatNumber(tokens)} —Ç–æ–∫–µ–Ω–æ–≤`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
function generateLeaderboard() {
    const sortedPlayers = Array.from(playersStats.values())
        .sort((a, b) => b.tokens - a.tokens)
        .slice(0, 10);

    if (sortedPlayers.length === 0) {
        return 'üèÜ ANON Farm - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\nüìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö\nüéÆ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!\n\nüî• Stay $ANON!';
    }

    let message = 'üèÜ ANON Farm - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n';
    
    sortedPlayers.forEach((player, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
        message += `${medal} <b>${player.name}</b>\n`;
        message += `üí∞ ${formatNumber(player.tokens)} $ANON —Ç–æ–∫–µ–Ω–æ–≤\n`;
        message += `üèÜ –£—Ä–æ–≤–µ–Ω—å ${player.level}\n\n`;
    });

    message += `üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${playersStats.size}\n`;
    message += `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n\n`;
    message += 'üî• Stay $ANON!';

    return message;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ (simple polling)
function getUpdates(offset = 0) {
    const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: `/bot${BOT_TOKEN}/getUpdates?offset=${offset}&timeout=30`,
        method: 'GET'
    };

    const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
            try {
                const response = JSON.parse(data);
                if (response.ok && response.result.length > 0) {
                    response.result.forEach(update => {
                        processUpdate(update);
                    });
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º polling —Å –Ω–æ–≤—ã–º offset
                    const lastUpdateId = response.result[response.result.length - 1].update_id;
                    setTimeout(() => getUpdates(lastUpdateId + 1), 1000);
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º polling
                    setTimeout(() => getUpdates(offset), 1000);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error);
                setTimeout(() => getUpdates(offset), 5000);
            }
        });
    });

    req.on('error', (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        setTimeout(() => getUpdates(offset), 5000);
    });

    req.end();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function processUpdate(update) {
    if (update.message && update.message.chat.id.toString() === CHAT_ID) {
        const message = update.message.text;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        if (message.startsWith('üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:')) {
            processPlayerStats(message);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ø–∞
        if (message.includes('üèÜ –ó–ê–ü–†–û–° –¢–û–ü–ê –ò–ì–†–û–ö–û–í')) {
            console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤');
            setTimeout(() => {
                const leaderboard = generateLeaderboard();
                sendMessage(leaderboard);
            }, 2000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ ANON Farm Leaderboard Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('üìä –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤...');
getUpdates();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–≥—Ä–æ–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
setInterval(() => {
    const now = Date.now();
    for (const [playerId, player] of playersStats) {
        if (now - player.lastUpdate > 24 * 60 * 60 * 1000) {
            playersStats.delete(playerId);
            console.log(`–£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫: ${player.name}`);
        }
    }
}, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å